[build-system]
requires = ["hatchling>=1.4.0", "hatch-nodejs-version"]
build-backend = "hatchling.build"

[project]
name = "jupyter_ai_magics"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.8"
classifiers = [
    "Framework :: Jupyter",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dynamic = ["version", "description", "authors", "urls", "keywords"]

dependencies = [
    "ipython",
    "importlib_metadata>=5.2.0",
    "langchain>=0.1.0,<0.3.0",
    "langchain_community>=0.1.0,<0.3.0",
    "typing_extensions>=4.5.0",
    "click~=8.0",
    "jsonpath-ng>=1.5.3,<2",
]

[project.optional-dependencies]
dev = ["pre-commit>=3.3.3,<4"]

test = ["coverage", "pytest", "pytest-asyncio", "pytest-cov"]

all = [
    "ai21",
    "gpt4all",
    "huggingface_hub",
    "ipywidgets",
    "langchain_anthropic",
    "langchain_aws",
    "langchain_cohere",
    "langchain_google_genai",
    "langchain_mistralai",
    "langchain_nvidia_ai_endpoints",
    "langchain_openai",
    "pillow",
    "boto3",
    "qianfan",
    "together",
]

[project.entry-points."jupyter_ai.model_providers"]
ai21 = "jupyter_ai_magics:AI21Provider"
anthropic = "jupyter_ai_magics.partner_providers.anthropic:AnthropicProvider"
anthropic-chat = "jupyter_ai_magics.partner_providers.anthropic:ChatAnthropicProvider"
cohere = "jupyter_ai_magics.partner_providers.cohere:CohereProvider"
gpt4all = "jupyter_ai_magics:GPT4AllProvider"
huggingface_hub = "jupyter_ai_magics:HfHubProvider"
ollama = "jupyter_ai_magics:OllamaProvider"
openai = "jupyter_ai_magics.partner_providers.openai:OpenAIProvider"
openai-chat = "jupyter_ai_magics.partner_providers.openai:ChatOpenAIProvider"
azure-chat-openai = "jupyter_ai_magics.partner_providers.openai:AzureChatOpenAIProvider"
sagemaker-endpoint = "jupyter_ai_magics.partner_providers.aws:SmEndpointProvider"
amazon-bedrock = "jupyter_ai_magics.partner_providers.aws:BedrockProvider"
amazon-bedrock-chat = "jupyter_ai_magics.partner_providers.aws:BedrockChatProvider"
amazon-bedrock-custom = "jupyter_ai_magics.partner_providers.aws:BedrockCustomProvider"
qianfan = "jupyter_ai_magics:QianfanProvider"
nvidia-chat = "jupyter_ai_magics.partner_providers.nvidia:ChatNVIDIAProvider"
together-ai = "jupyter_ai_magics:TogetherAIProvider"
gemini = "jupyter_ai_magics.partner_providers.gemini:GeminiProvider"
mistralai = "jupyter_ai_magics.partner_providers.mistralai:MistralAIProvider"

[project.entry-points."jupyter_ai.embeddings_model_providers"]
azure = "jupyter_ai_magics.partner_providers.openai:AzureOpenAIEmbeddingsProvider"
bedrock = "jupyter_ai_magics.partner_providers.aws:BedrockEmbeddingsProvider"
cohere = "jupyter_ai_magics.partner_providers.cohere:CohereEmbeddingsProvider"
mistralai = "jupyter_ai_magics.partner_providers.mistralai:MistralAIEmbeddingsProvider"
gpt4all = "jupyter_ai_magics:GPT4AllEmbeddingsProvider"
huggingface_hub = "jupyter_ai_magics:HfHubEmbeddingsProvider"
ollama = "jupyter_ai_magics:OllamaEmbeddingsProvider"
openai = "jupyter_ai_magics.partner_providers.openai:OpenAIEmbeddingsProvider"
qianfan = "jupyter_ai_magics:QianfanEmbeddingsEndpointProvider"

[tool.hatch.version]
source = "nodejs"

[tool.hatch.metadata.hooks.nodejs]
fields = ["description", "authors", "urls"]

[tool.hatch.build.hooks.version]
path = "jupyter_ai_magics/_version.py"
